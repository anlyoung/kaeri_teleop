#!/usr/bin/env python

import math
import numpy

from interactive_markers.interactive_marker_server import *
from visualization_msgs.msg import *
from geometry_msgs.msg import Pose

class interactiveMarker:
    def __init__(self, name, initial_pos, initial_ori, offset_pos, offset_ori):
	self.name = name
        # pose of vis. marker in "world" frame
        self.markerPose = Pose()
        # pose of sub_frame (ex. "phantom" frame) in "world" frame
        self.worldPose = Pose()
        # transformation pose from vis. marker to sub_frame
        self.markerOffset = Pose()

        self.markerPose.position.x = initial_pos[0]
        self.markerPose.position.y = initial_pos[1]
        self.markerPose.position.z = initial_pos[2]
        self.markerPose.orientation.x = initial_ori[0]
        self.markerPose.orientation.y = initial_ori[1]
        self.markerPose.orientation.z = initial_ori[2]
        self.markerPose.orientation.w = initial_ori[3]

        self.markerOffset.position.x = offset_pos[0]
        self.markerOffset.position.x = offset_pos[1]
        self.markerOffset.position.x = offset_pos[2]
        self.markerOffset.orientation.x = offset_ori[0]
        self.markerOffset.orientation.y = offset_ori[1]
        self.markerOffset.orientation.z = offset_ori[2]
        self.markerOffset.orientation.w = offset_ori[3]

        self.worldPose = self.poseTransform(self.markerOffset, self.markerPose)

    def poseTransform(self, pose1, pose2):
        # transform pose1 from [(0,0,0) (0,0,0,1)] to pose2 (q2*q1)
        pose = Pose()
        pose.position.x = pose1.position.x + pose2.position.x
        pose.position.y = pose1.position.y + pose2.position.y
        pose.position.z = pose1.position.z + pose2.position.z

        pose.orientation.w = pose1.orientation.w*pose2.orientation.w\
                            - pose1.orientation.x*pose2.orientation.x\
                            - pose1.orientation.y*pose2.orientation.y\
                            - pose1.orientation.z*pose2.orientation.z

        pose.orientation.x = pose1.orientation.w*pose2.orientation.x\
                            + pose1.orientation.x*pose2.orientation.w\
                            - pose1.orientation.y*pose2.orientation.z\
                            + pose1.orientation.z*pose2.orientation.y

        pose.orientation.y = pose1.orientation.w*pose2.orientation.y\
                            + pose1.orientation.x*pose2.orientation.z\
                            + pose1.orientation.y*pose2.orientation.w\
                            - pose1.orientation.z*pose2.orientation.x

        pose.orientation.z = pose1.orientation.w*pose2.orientation.z\
                            - pose1.orientation.x*pose2.orientation.y\
                            + pose1.orientation.y*pose2.orientation.x\
                            + pose1.orientation.z*pose2.orientation.w
        return pose

    def processFeedback(self, feedback):
        # update Pose
        p = feedback.pose.position
        q = feedback.pose.orientation
        self.markerPose = feedback.pose
        self.worldPose = self.poseTransform(self.markerOffset, feedback.pose)

        print feedback.marker_name + " is now at (" + str(p.x) + ", " + str(p.y) + ", " + str(p.z) + ") (" + str(q.x) + ", " + str(q.y) + ", " + str(q.z) + ", " + str(q.w) +")"

    def make6DofMarker(self, marker, server, fixed, xTrans = False, yTrans = False, zTrans = False, xRot = False, yRot = False, zRot = False):
        int_marker = InteractiveMarker()
        int_marker.header.frame_id = "world"
        int_marker.pose = self.markerPose
        int_marker.scale = 0.7

        int_marker.name = self.name
        int_marker.description = self.name

        # insert marker
        control = InteractiveMarkerControl()
        control.always_visible = True
        control.interaction_mode = InteractiveMarkerControl.NONE
        control.markers.append(marker)
        int_marker.controls.append(control)

        if yRot:
            control = InteractiveMarkerControl()
            control.orientation.w = 1
            control.orientation.x = 0
            control.orientation.y = 0
            control.orientation.z = 1
            control.name = "rotate_y"
            control.interaction_mode = InteractiveMarkerControl.ROTATE_AXIS
            control.description = "rotate y"
            if fixed:
                control.orientation_mode = InteractiveMarkerControl.FIXED
            int_marker.controls.append(control)

        if zRot:
            control = InteractiveMarkerControl()
            control.orientation.w = 1
            control.orientation.x = 0
            control.orientation.y = 1
            control.orientation.z = 0
            control.name = "rotate_z"
            control.interaction_mode = InteractiveMarkerControl.ROTATE_AXIS
            control.description = "rotate z"
            if fixed:
                control.orientation_mode = InteractiveMarkerControl.FIXED
            int_marker.controls.append(control)

        if xRot:
            control = InteractiveMarkerControl()
            control.orientation.w = 1
            control.orientation.x = 1
            control.orientation.y = 0
            control.orientation.z = 0
            control.name = "rotate_x"
            control.interaction_mode = InteractiveMarkerControl.ROTATE_AXIS
            control.description = "rotate x"
            if fixed:
                control.orientation_mode = InteractiveMarkerControl.FIXED
            int_marker.controls.append(control)

        if xTrans:
            control = InteractiveMarkerControl()
            control.orientation.w = 1
            control.orientation.x = 1
            control.orientation.y = 0
            control.orientation.z = 0
            control.name = "move_x"
            control.interaction_mode = InteractiveMarkerControl.MOVE_AXIS
            control.description = "move x"
            if fixed:
                control.orientation_mode = InteractiveMarkerControl.FIXED
            int_marker.controls.append(control)


        if zTrans:
            control = InteractiveMarkerControl()
            control.orientation.w = 1
            control.orientation.x = 0
            control.orientation.y = 1
            control.orientation.z = 0
            control.name = "move_z"
            control.interaction_mode = InteractiveMarkerControl.MOVE_AXIS
            control.description = "move z"
            if fixed:
                control.orientation_mode = InteractiveMarkerControl.FIXED
            int_marker.controls.append(control)


        if yTrans:
            control = InteractiveMarkerControl()
            control.orientation.w = 1
            control.orientation.x = 0
            control.orientation.y = 0
            control.orientation.z = 1
            control.name = "move_y"
            control.interaction_mode = InteractiveMarkerControl.MOVE_AXIS
            control.description = "move y"
            if fixed:
                control.orientation_mode = InteractiveMarkerControl.FIXED
            int_marker.controls.append(control)

        server.insert(int_marker, self.processFeedback)
