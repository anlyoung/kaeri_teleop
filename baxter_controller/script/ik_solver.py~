#!/usr/bin/env python

import struct
import sys
import threading
import Queue

import rospy
import tf
import baxter_interface

from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Pose

from ik_solver import baxter_controller


bxtC = baxter_controller.baxter_controller()


def endEffectorPoseCallBack(msg):
	hdr = Header(stamp=rospy.Time.now(), frame_id='base')
	baxter_effector_pose = PoseStamped(header=hdr, pose = msg)
	bxtC.inverse_kinematics(baxter_effector_pose)
  

if __name__ == '__main__':
    # init ROS node
    rospy.init_node("ik_solver")

    # create subscriber end effect position
    rospy.Subscriber('baxter_end_effector_pose', Pose, endEffectorPoseCallBack)


    rate = rospy.Rate(10.0)
    while not rospy.is_shutdown():
        rate.sleep()

































