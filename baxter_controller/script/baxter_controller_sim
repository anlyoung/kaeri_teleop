#!/usr/bin/env python

import struct
import sys
import threading
import Queue
import math
import numpy as np

# ROS
import rospy
import tf

from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Point
from std_msgs.msg import Header
from std_msgs.msg import String
from visualization_msgs.msg import Marker

# custom
from ik_solver import ik_solver
from ik_solver import transformations as trans

bxtC_r = ik_solver.baxter_controller('right')
move = False
endEffectorPose = Pose()
sensorTrajectoryRadius = 0.5				# radius of RGBD sensor trajectory 


def endEffectorPoseCallBack(msg):
	global endEffectorPose
	baxter_effector_pose = Pose()
	baxter_effector_pose.position.x = msg.position.x
	baxter_effector_pose.position.y = msg.position.y
	baxter_effector_pose.position.z = msg.position.z
		
	q_pose = np.array([msg.orientation.w, msg.orientation.x, msg.orientation.y, msg.orientation.z])
	q_pose_t = trans.quaternion_conjugate(q_pose)
	
	ori = trans.quaternion_multiply(np.array([1.0/math.sqrt(2.0), 1.0/math.sqrt(2.0), 0, 0]), np.array([1.0/math.sqrt(2.0), 0, 1.0/math.sqrt(2.0), 0]))	
	res_ori = trans.quaternion_multiply(q_pose,ori)

	baxter_effector_pose.orientation.w = res_ori[0]
	baxter_effector_pose.orientation.x = res_ori[1]
	baxter_effector_pose.orientation.y = res_ori[2]
	baxter_effector_pose.orientation.z = res_ori[3]

	endEffectorPose = baxter_effector_pose

  
def buttonCallBack(msg):
	global move
	if (msg.data == "btn1down") | (msg.data == "btn1drag"):
		move = True
	else: 
		move = False

	
if __name__ == '__main__':
	# init ROS node
	rospy.init_node("ik_solver")

	# create subscriber end effect position
	rospy.Subscriber('Phantom_joint_states', Pose, endEffectorPoseCallBack)
	rospy.Subscriber('Phantom_button_state', String, buttonCallBack)

	# create publisher for command point marker
	pub_command_right = rospy.Publisher('command_right', Marker, queue_size=1)

	marker_right = Marker()
	marker_right.header.frame_id = "world"
	marker_right.ns = "command_point_right"
	marker_right.id = 1;
	marker_right.type = Marker.SPHERE
	marker_right.action = Marker.ADD
	marker_right.scale.x = 0.1
	marker_right.scale.y = 0.1
	marker_right.scale.z = 0.1
	marker_right.color.a = 1.0

	rate = rospy.Rate(10.0)
	while not rospy.is_shutdown():
		#print(move)
		if move:
			hdr = Header(stamp=rospy.Time.now(), frame_id='base')
			baxter_effector_pose_right = PoseStamped(header=hdr, pose = endEffectorPose)
			color_right = bxtC_r.inverse_kinematics(baxter_effector_pose_right)
			if color_right:
				marker_right.color.r = 0
				marker_right.color.g = 1
				marker_right.color.b = 0
			else:
				marker_right.color.r = 1
				marker_right.color.g = 0
				marker_right.color.b = 0
			marker_right.pose = endEffectorPose
			pub_command_right.publish(marker_right)

		rate.sleep()



		"""
		baxter_effector_pose.pose.position.x = command_pose.pose.position.x
		baxter_effector_pose.pose.position.y = command_pose.pose.position.y
		baxter_effector_pose.pose.position.z = command_pose.pose.position.z
			
		q_pose = np.array([command_pose.pose.orientation.w, command_pose.pose.orientation.x, command_pose.pose.orientation.y, command_pose.pose.orientation.z])
		q_pose_t = trans.quaternion_conjugate(q_pose)
		
		ori = trans.quaternion_multiply(np.array([1.0/math.sqrt(2.0), 1.0/math.sqrt(2.0), 0, 0]), np.array([1.0/math.sqrt(2.0), 0, 1.0/math.sqrt(2.0), 0]))	
		res_ori = trans.quaternion_multiply(q_pose,ori)

		baxter_effector_pose.pose.orientation.w = res_ori[0]
		baxter_effector_pose.pose.orientation.x = res_ori[1]
		baxter_effector_pose.pose.orientation.y = res_ori[2]
		baxter_effector_pose.pose.orientation.z = res_ori[3]
		"""
