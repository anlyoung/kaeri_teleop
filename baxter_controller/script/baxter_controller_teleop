#!/usr/bin/env python

import struct
import sys
import threading
import Queue
import math
import numpy as np

# ROS
import rospy
import tf

from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Point
from std_msgs.msg import Header
from std_msgs.msg import String
from visualization_msgs.msg import Marker

# custom
from ik_solver import ik_solver
import transformations

bxtC_r = ik_solver.baxter_controller('right')
bxtC_l = ik_solver.baxter_controller('left')
move = False
teleop = False
moveSensor = False
endEffectorPose = Pose()
sensorPose = Pose()
RGBDsensorPose = Point()						# rotation around x, y, z axis (in world coordinate)
sensorTrajectoryRadius = 0.5				# radius of RGBD sensor trajectory 

def endEffectorPoseCallBack(msg):
	global endEffectorPose
	endEffectorPose = msg

  
def buttonCallBack(msg):
	global move
	if (msg.data == "btn1down") | (msg.data == "btn1drag"):
		move = True
	else: 
		move = False


def teleopModeCallBack(msg):
	global teleop
	if msg.data == "teleop":
		teleop = True
	else: 
		teleop = False


def sensorCommandCallBack(msg):
	global RGBDsensorPose, moveSensor
	if msg.data == 'up':
		if RGBDsensorPose.y < math.pi/2:
			RGBDsensorPose.y = RGBDsensorPose.y + math.pi/180.0
			moveSensor = True

	if msg.data == 'down':
		if RGBDsensorPose.y > -math.pi/2:
			RGBDsensorPose.y = RGBDsensorPose.y - math.pi/180.0
			moveSensor = True

	if msg.data == 'left':
		if RGBDsensorPose.z > -math.pi/2:
			RGBDsensorPose.z = RGBDsensorPose.z - math.pi/180.0
			moveSensor = True

	if msg.data == 'right':
		if RGBDsensorPose.z < -math.pi/6:
			RGBDsensorPose.z = RGBDsensorPose.z + math.pi/180.0
			moveSensor = True

	if msg.data == 'follow':
		moveSensor = True

	
if __name__ == '__main__':
	# init ROS node
	rospy.init_node("ik_solver")

	# create subscriber end effect position
	rospy.Subscriber('Phantom_joint_states', Pose, endEffectorPoseCallBack)
	rospy.Subscriber('Phantom_button_state', String, buttonCallBack)
	rospy.Subscriber('teleop_mode', String, teleopModeCallBack)
	rospy.Subscriber('sensor_command', String, sensorCommandCallBack)

	# create publisher for command point marker
	pub_command_right = rospy.Publisher('command_right', Marker, queue_size=1)
	pub_command_left = rospy.Publisher('command_left', Marker, queue_size=1)

	RGBDsensorPose.x = 0
	#RGBDsensorPose.y = -math.pi/4
	RGBDsensorPose.y = 0
	RGBDsensorPose.z = -math.pi/4.0

	marker_right = Marker()
	marker_right.header.frame_id = "world"
	marker_right.ns = "command_point_right"
	marker_right.id = 1;
	marker_right.type = Marker.SPHERE
	marker_right.action = Marker.ADD
	marker_right.scale.x = 0.1
	marker_right.scale.y = 0.1
	marker_right.scale.z = 0.1
	marker_right.color.a = 0.3

	marker_left = Marker()
	marker_left.header.frame_id = "world"
	marker_left.ns = "command_point_left"
	marker_left.id = 1;
	marker_left.type = Marker.SPHERE
	marker_left.action = Marker.ADD
	marker_left.scale.x = 0.1
	marker_left.scale.y = 0.1
	marker_left.scale.z = 0.1
	marker_left.color.a = 0.3

	rate = rospy.Rate(10.0)
	while not rospy.is_shutdown():
		#print(move, teleop, moveSensor)
		if move & teleop:
			hdr = Header(stamp=rospy.Time.now(), frame_id='base')
			baxter_effector_pose_right = PoseStamped(header=hdr, pose = endEffectorPose)
			print ('Inside Baxter_controller_teleop: ' , endEffectorPose)
			color_right = bxtC_r.inverse_kinematics(baxter_effector_pose_right)
			if color_right:
				marker_right.color.r = 0
				marker_right.color.g = 1
				marker_right.color.b = 0
			else:
				marker_right.color.r = 1
				marker_right.color.g = 0
				marker_right.color.b = 0
			marker_right.pose = endEffectorPose
			pub_command_right.publish(marker_right)
				

		if moveSensor:
			sensorPose.position.x = endEffectorPose.position.x + sensorTrajectoryRadius*math.cos(math.pi+RGBDsensorPose.z)*math.cos(RGBDsensorPose.y)
			sensorPose.position.y = endEffectorPose.position.y + sensorTrajectoryRadius*math.sin(math.pi+RGBDsensorPose.z)*math.cos(RGBDsensorPose.y)
			sensorPose.position.z = endEffectorPose.position.z + sensorTrajectoryRadius*math.sin(RGBDsensorPose.y)

			#q_pose = np.array([endEffectorPose.orientation.w, endEffectorPose.orientation.x, endEffectorPose.orientation.y, endEffectorPose.orientation.z])
			q_pose = np.array([1,0,0,0])
			#q_rot_tmp = np.array([1/math.sqrt(2), 0, 0, -1/math.sqrt(2)])
			#q_rot_tmp2 = np.array([1/math.sqrt(2), -1/math.sqrt(2), 0, 0])
			q_rot_pitch = np.array([math.cos(RGBDsensorPose.y/2.0), 0.0, math.sin(RGBDsensorPose.y/2.0), 0.0])
			q_rot_yaw = np.array([math.cos(RGBDsensorPose.z/2.0), 0.0, 0.0, math.sin(RGBDsensorPose.z/2.0)])

			#pose_ori = trans.quaternion_multiply(q_rot_tmp, q_pose)
			#pose_ori = trans.quaternion_multiply(q_rot_tmp2, pose_ori)
			pose_ori = q_pose
			pose_ori = trans.quaternion_multiply(q_rot_pitch, pose_ori)
		 	pose_ori = trans.quaternion_multiply(q_rot_yaw, pose_ori)

			sensorPose.orientation.x = pose_ori[1]
			sensorPose.orientation.y = pose_ori[2]
			sensorPose.orientation.z = pose_ori[3]
			sensorPose.orientation.w = pose_ori[0]
			#sensorPose.orientation.x = 0
			#sensorPose.orientation.y = 0
			#sensorPose.orientation.z = 0
			#sensorPose.orientation.w = 1

			hdr = Header(stamp=rospy.Time.now(), frame_id='base')
			baxter_effector_pose_left = PoseStamped(header=hdr, pose = sensorPose)
			color_left = bxtC_l.inverse_kinematics(baxter_effector_pose_left)
			if color_left:
				marker_left.color.r = 0
				marker_left.color.g = 1
				marker_left.color.b = 0
			else:
				marker_left.color.r = 1
				marker_left.color.g = 0
				marker_left.color.b = 0
			marker_left.pose = sensorPose
			pub_command_left.publish(marker_left)
			moveSensor = False

		rate.sleep()

