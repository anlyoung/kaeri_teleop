#!/usr/bin/env python

import math
import numpy

import rospy
from interactive_markers.interactive_marker_server import *
from visualization_msgs.msg import *
from tf.broadcaster import TransformBroadcaster
import tf

from geometry_msgs.msg import Pose
from geometry_msgs.msg import Point
from std_msgs.msg import Bool
from std_msgs.msg import String

from modules import command_interface

cInterface = command_interface.command_interface()

def jointCallBack(msg):
	cInterface.cs_pose_world.position.x = msg.position.x
	cInterface.cs_pose_world.position.y = msg.position.y
	cInterface.cs_pose_world.position.z = msg.position.z	

	cInterface.cs_pose_world.orientation.x = msg.orientation.x
	cInterface.cs_pose_world.orientation.y = msg.orientation.y
	cInterface.cs_pose_world.orientation.z = msg.orientation.z
	cInterface.cs_pose_world.orientation.w = msg.orientation.w


def buttonCallBack(msg):
	cInterface.execute_command(msg.data)


def touchCallBack(msg):
	cInterface.phtm_touched = msg.data


def teleopModeCallBack(msg):
	cInterface.mode = msg.data
	

def vfActionCallBack(msg):
	cInterface.vf_action(msg.data)


if __name__=="__main__":
	rospy.init_node("rviz_controller")

	# create publishers 
	pub_vf_mesh = rospy.Publisher('vf_objects', MarkerArray, queue_size=1)
	pub_vf_real_time = rospy.Publisher('vf_real_time', MarkerArray, queue_size=1)

	# create subscribers
	rospy.Subscriber('Phantom_joint_states', Pose, jointCallBack)
	rospy.Subscriber('Phantom_button_state', String, buttonCallBack)
	rospy.Subscriber('Phantom_touch_state', Bool, touchCallBack)	

	rospy.Subscriber('teleop_mode', String, teleopModeCallBack) 
	rospy.Subscriber('vf_action', String, vfActionCallBack) 

	# main loop
	rate = rospy.Rate(30.0)
	#i = 0
	while not rospy.is_shutdown():
		# real time mesh visualization update
		pub_vf_real_time.publish(cInterface.real_time_update())

		# object update
		pub_vf_mesh.publish(cInterface.obj_manager.markerArray)

		rate.sleep()

